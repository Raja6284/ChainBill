// import jsPDF from 'jspdf'

// export interface InvoiceData {
//   invoiceNumber: string
//   productName: string
//   buyerEmail: string
//   sellerEmail: string
//   amountUSD: number
//   amountCrypto: number
//   currency: string
//   transactionHash: string
//   walletAddress: string
//   timestamp: Date
// }

// const options = {
//   year: "numeric" as const,
//   month: "numeric" as const,
//   day: "numeric" as const,
//   hour: "numeric" as const,
//   minute: "numeric" as const,
//   second: "numeric" as const,
//   hour12: false, // Use 24-hour format
// };

// export function generateInvoicePDF(data: InvoiceData): string {
//   const doc = new jsPDF()
  
//   // Header
//   doc.setFontSize(24)
//   doc.setTextColor(16, 185, 129) // Green color
//   doc.text('CryptoPayLink', 20, 30)
  
//   doc.setFontSize(18)
//   doc.setTextColor(0, 0, 0)
//   doc.text('INVOICE', 20, 50)
  
//   // Invoice details
//   doc.setFontSize(12)
//   doc.text(`Invoice #: ${data.invoiceNumber}`, 20, 70)
//   doc.text(`Date: ${data.timestamp.toLocaleString('en-GB',options)}`, 20, 85)
  
//   // Product details
//   doc.setFontSize(14)
//   doc.text('Product Details', 20, 110)
//   doc.setFontSize(12)
//   doc.text(`Product: ${data.productName}`, 20, 130)
//   doc.text(`Amount: $${data.amountUSD} USD`, 20, 145)
//   doc.text(`Crypto Amount: ${data.amountCrypto} ${data.currency}`, 20, 160)
  
//   // Payment details
//   doc.setFontSize(14)
//   doc.text('Payment Details', 20, 185)
//   doc.setFontSize(12)
//   doc.text(`Buyer: ${data.buyerEmail}`, 20, 205)
//   doc.text(`Seller: ${data.sellerEmail}`, 20, 220)
//   doc.text(`Wallet Address: ${data.walletAddress}`, 20, 235)
//   doc.text(`Transaction Hash: ${data.transactionHash}`, 20, 250)
  
//   // Footer
//   doc.setFontSize(10)
//   doc.setTextColor(128, 128, 128)
//   doc.text('Generated by CryptoPayLink - Crypto Payment Platform', 20, 280)
  
//   return doc.output('datauristring')
// }












import jsPDF from 'jspdf';

export interface InvoiceData {
  invoiceNumber: string;
  productName: string;
  buyerEmail: string;
  sellerEmail: string;
  amountUSD: number;
  amountCrypto: number;
  currency: string;
  transactionHash: string;
  walletAddress: string;
  timestamp: Date;
}

const options = {
  year: 'numeric' as const,
  month: 'short' as const,
  day: 'numeric' as const,
  hour: '2-digit' as const,
  minute: '2-digit' as const,
  second: '2-digit' as const,
  hour12: false,
};

export function generateInvoicePDF(data: InvoiceData): string {
  const doc = new jsPDF();

  // Branding Header
  doc.setFontSize(22);
  doc.setTextColor(33, 150, 243); // Blue accent
  doc.text('CryptoPayLink', 20, 20);
  doc.setFontSize(12);
  doc.setTextColor(150, 150, 150);
  doc.text('Secure Crypto Payment Checkout', 20, 28);

  // Invoice Title
  doc.setFontSize(18);
  doc.setTextColor(0, 0, 0);
  doc.text('INVOICE', 150, 20, { align: 'right' });

  // Divider line
  doc.setDrawColor(200, 200, 200);
  doc.line(20, 32, 190, 32);

  // Invoice Metadata
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Invoice #: ${data.invoiceNumber}`, 20, 45);
  doc.text(`Date: ${data.timestamp.toLocaleString('en-GB', options)}`, 20, 52);

  // Product Section
  doc.setFontSize(14);
  doc.text('Product Information', 20, 70);
  doc.setFontSize(12);
  doc.setTextColor(50, 50, 50);
  doc.text(`Product Name: ${data.productName}`, 25, 80);
  doc.text(`Amount (USD): $${data.amountUSD.toFixed(2)}`, 25, 90);
  doc.text(`Crypto Amount: ${data.amountCrypto} ${data.currency}`, 25, 100);

  // Buyer/Seller
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text('Participants', 20, 120);
  doc.setFontSize(12);
  doc.setTextColor(50, 50, 50);
  doc.text(`Buyer Email: ${data.buyerEmail}`, 25, 130);
  doc.text(`Seller Email: ${data.sellerEmail}`, 25, 140);

  // Transaction Section
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text('Payment Details', 20, 160);
  doc.setFontSize(12);
  doc.setTextColor(50, 50, 50);
  doc.text(`Wallet Address: ${data.walletAddress}`, 25, 170);
  doc.text('Transaction Hash:', 25, 180);

  const chunkedHash = data.transactionHash.match(/.{1,45}/g) || [];
  chunkedHash.forEach((line, i) => {
    doc.text(line, 30, 188 + i * 6); // Wrap hash if long
  });

  // Footer
  doc.setTextColor(150, 150, 150);
  doc.setFontSize(10);
  doc.text('Thank you for using CryptoPayLink.', 105, 275, { align: 'center' });
  doc.text('This document is auto-generated and valid without signature.', 105, 282, { align: 'center' });

  return doc.output('datauristring');
}
